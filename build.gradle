buildscript {
    def root = rootProject.projectDir
    apply from: "$root/versions.gradle"
    apply from: "$root/gradle/tak-utils.gradle"

    // Should only be declared during a TAK product center release pipeline run
    ext.isPipeline = getProperty("takrepo.url", null) != null

    repositories {
        gradlePluginPortal()
        mavenCentral()
        google()
        maven { url "https://jitpack.io" }

        if (isPipeline) {
            println("Using pipeline, declaring takRepo maven repo")
            maven {
                allowInsecureProtocol = true
                url = takrepoUrl
                credentials {
                    username = takrepoUser
                    password = takrepoPassword
                }
            }
        } else {
            println("Not using pipeline, declaring local maven repo")
            maven { url "${rootProject.projectDir}/maven" }
        }
    }

    dependencies {
        classpath "com.android.tools.build:gradle:$versions.agp"
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$versions.kotlin"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$versions.kotlin"

        if (!isPipeline) {
            println("Not using pipeline, declaring plugins")
            classpath "app.cash.licensee:licensee-gradle-plugin:$versions.licensee"
            classpath "com.diffplug.spotless:spotless-plugin-gradle:$versions.spotless"
            classpath "com.github.ben-manes:gradle-versions-plugin:$versions.gradle_versions"
            classpath "com.osacky.doctor:doctor-plugin:$versions.doctor"
            classpath "io.gitlab.arturbosch.detekt:detekt-gradle-plugin:$versions.detekt"
            classpath "org.jetbrains.kotlinx:kover:$versions.kover"
            classpath "org.jlleitschuh.gradle:ktlint-gradle:$versions.ktlint_gradle"
        }

        if (isDevKitEnabled()) {
            /* TPC 3rd party pipeline Maven repo */
            println("Using dev kit!")
            def takdevVersion = "2.+"
            classpath "com.atakmap.gradle:atak-gradle-takdev:${takdevVersion}"
        } else {
            /* Local Maven */
            println("Not using dev kit!")
            if (isPipeline) {
                def takdevPluginFiles = files(takdevPlugin)
                println("Using pipeline, takdevPluginFiles = $takdevPluginFiles")
                takdevPluginFiles.getFiles().forEach { println("File = ${it.absolutePath}") }
                classpath takdevPluginFiles
            } else {
                println("Not using pipeline, getting a debug build of the takdev plugin from Jitpack")
                classpath "com.github.jonapoul:atak-gradle-takdev:$versions.takdev"
            }
        }
    }

    configurations.all {
        resolutionStrategy {
            dependencySubstitution {
                substitute module("net.sf.proguard:proguard-gradle") with module("com.guardsquare:proguard-gradle:$versions.proguard")
            }
        }
    }
}

def root = rootProject.projectDir
if (!isPipeline) {
    println("Not using pipeline, including plugin config files")
    apply from: "$root/gradle/detekt.gradle"
    apply from: "$root/gradle/doctor.gradle"
    apply from: "$root/gradle/dependency-updates.gradle"
    apply from: "$root/gradle/kover.gradle"
    apply from: "$root/gradle/ktlint.gradle"
    apply from: "$root/gradle/licensee.gradle"
    apply from: "$root/gradle/spotless.gradle"
}

allprojects {
    if (!isPipeline) {
        task runChecks() {
            dependsOn "detekt"
            dependsOn "ktlintCheck"
            dependsOn "spotlessCheck"
        }
    }

    repositories {
        mavenCentral()
        google()
        maven { url "https://jitpack.io" }
        maven { url "${rootProject.projectDir}/maven" }
    }
}

subprojects {
    tasks.withType(Test) {
        testLogging {
            exceptionFormat "FULL"
            showCauses true
            showExceptions true
            showStackTraces true
            showStandardStreams true
        }
    }
}
